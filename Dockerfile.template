#Minitid image for microscope and viewing
FROM balenalib/raspberry-pi-debian:stretch-run
USER root

WORKDIR /root

#Get python, conda, and apt-get/apk package dependencies 
COPY MinitidDockerImage/requirements.txt /requirements.txt
COPY MinitidDockerImage/apt_requirements.txt /apt_requirements.txt
ENV APT_PACKAGES=$( awk -F: '/^[^#]/ { print $2 }'} apt_requirements.txt)

RUN apt-get -q update && \ 
	apt-get dist-upgrade && \
	apt-get install -yq --no-install-recommends  $APT_PACKAGES && \
	apt-get update && \
	apt-get clean && \
	rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*   
  
#Install php7
#RUN cd /root && git clone https://github.com/kasparsd/php-7-debian.git && \
#	cd php-7-debian/  && \
#	./build.sh && \
#	./install.sh
  
RUN curl -s -L https://github.com/jjhelmus/berryconda/releases/download/v2.0.0/Berryconda3-2.0.0-Linux-armv7l.sh > miniconda.sh && \
    bash miniconda.sh -b -p /opt/conda && \
    rm miniconda.sh && \
    export PATH=/opt/conda/bin:$PATH  && \
    conda config --set show_channel_urls True && \
    conda config --system --add channels rpi && \
#    conda config --add channels conda-forge && \
    conda update conda && \
    conda update --all --yes && \
#    conda install conda-build && \
#    conda install anaconda-client && \
    conda install -y pip \
	    setuptools && \
	    python=3.6.3 && \
	conda clean -tipy && \
	if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi
ENV PATH=/opt/conda/bin:$PATH	

#Install python packages defined in the requirements file
RUN pip3 install -r /requirements.txt 


#Install RPI channell specific packages
RUN pip install -U pip setuptools --ignore-installed \
	&& pip install jupyterlab

# Install packages for microscope camera -- Either UV4l or RPI Cam inteface based

# Install the UV4L PPA
RUN curl -s http://www.linux-projects.org/listing/uv4l_repo/lpkey.asc | apt-key add - &&\
  sed -i '1s;^;deb http://www.linux-projects.org/listing/uv4l_repo/raspbian/stretch stretch main\n;' /etc/apt/sources.list

# Install dependencies as well as the proper version of uv4l-webrtc
RUN apt-get update -q &&\
  apt-get install -yq \
    uv4l \
    uv4l-demos \
    uv4l-dummy \
    uv4l-mjpegstream \
    uv4l-raspicam \
    uv4l-raspicam-extras \
    uv4l-raspidisp \
    uv4l-server \
    uv4l-uvc \
    uv4l-xmpp-bridge \
    uv4l-xscreen \
    uv4l-webrtc$([ $(uname -m) = armv6l ] && echo -armv6) \
    vlc \
  && apt-get clean && rm -rf /var/lib/apt/lists/*


#RUN mkdir -p /usr/src/app && \
#	cd /usr/src/app && \
#	git clone https://github.com/silvanmelchior/RPi_Cam_Web_Interface.git && \
#	cd RPi_Cam_Web_Interface && \
#    chmod u+x *.sh && \
#    mkdir -p /run/shm/mjpeg && \
#    sed -i 's/sudo //g' install.sh && \
#    sed -i 's/sudo //g' start.sh && \
#    sed -i 's/sudo //g' stop.sh && \
#    sed -i 's/sudo //g' remove.sh && \
#    sed -i 's/sudo //g' update.sh && \
#    sed -i 's/sudo //g' RPi_Cam_Web_Interface_Installer.sh && \
#    sed -i 's/sudo shutdown -r now//g' www/macros/error_hard.sh && \
#    sed -i 's/80/8080/g' install.sh && \  
#    sed -i '/raspizip/d' install.sh && \
#    rm www/macros/error_hard.sh && \
#    mkdir -p /opt/vc/bin && \
#	cp bin/raspimjpeg /opt/vc/bin/ && \
#	chmod 755 /opt/vc/bin/raspimjpeg && \
#	echo /opt/vc/lib > /etc/ld.so.conf	 && \
#	if [ ! -e /usr/bin/raspimjpeg ]; then ln -s /opt/vc/bin/raspimjpeg /usr/bin/raspimjpeg; fi && \
#	ldconfig && \
#	wget https://raw.githubusercontent.com/droogmic/rpi-cam-web-docker/master/install/config.txt && \
#	sed -i "s/80/8080/g" config.txt && \
#	sed -i "s/nginx/apache/g" config.txt && \
#	sed -i "s/rpicamdir=\"\"/rpicamdir=\"microscope\"/g" config.txt && \
#	./install.sh q 

#Enable google drive in jupyterlab
RUN pip install jupyterlab --no-cache-dir
RUN jupyter serverextension enable --py jupyterlab --sys-prefix	
#	jupyter labextension install @jupyterlab/google-drive && \
#	jupyter labextension install @jupyterlab/plotly-extension
	
#set bash as default shell
ENV SHELL=/bin/bash

#Configure jupyter
RUN jupyter notebook --generate-config --allow-root && \
	sed -i "/c.NotebookApp.open_browser/c c.NotebookApp.open_browser = False" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.ip/c c.NotebookApp.ip = '*'" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.notebook_dir/c c.NotebookApp.notebook_dir = '/root/Euplotid'" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.token/c c.NotebookApp.token = 'euplotid'" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.iopub_data_rate_limit/c c.NotebookApp.iopub_data_rate_limit = 10000000" /root/.jupyter/jupyter_notebook_config.py \
        && jupyter nbextension enable --py widgetsnbextension \
        && jupyter contrib nbextension install --system \
        && jupyter nbextension install nbpresent --py --overwrite --system \
		&& jupyter nbextension enable nbpresent --py --system \
		&& jupyter serverextension enable nbpresent --py --system 

#Get stuff for interacting in real life
#RUN cd /root && git clone git://git.drogon.net/wiringPi && cd wiringPi && ./build
#RUN cd /root && git clone https://github.com/WiringPi/WiringPi.git && cd WiringPi && ./build
#RUN cd /root && git clone https://github.com/timleland/rfoutlet.git /var/www/rfoutlet && chmod 755 /var/www/rfoutlet/codesend
RUN cd /root && git clone https://github.com/RTIMULib/RTIMULib2.git && \
	cd RTIMULib2/Linux/python && \
	python3 setup.py build && \
	python3 setup.py install

# Install node
ENV NODE_VERSION 9.4.0
#RUN curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-armv6l.tar.gz" && \
#    tar -xzf "node-v$NODE_VERSION-linux-armv6l.tar.gz" -C /usr/local --strip-components=1 && \
#    rm "node-v$NODE_VERSION-linux-armv6l.tar.gz" && \
#    npm config set unsafe-perm true -g --unsafe-perm && \
#    rm -rf /tmp/*

# Install resin-wifi-connect
ENV DEVICE_TYPE=%%RESIN_MACHINE_NAME%%
RUN mkdir -p /usr/src/app && \
	cd /usr/src/app && \
	curl -Ls https://github.com/balena-io/wifi-connect/releases/download/v4.2.5/wifi-connect-v4.2.5-linux-armv7hf.tar.gz \
    | tar -xvz -C /usr/src/app/

#Install openscad
#RUN cd /root && \
#	wget https://download.opensuse.org/repositories/home:/t-paul/AppImage.arm/OpenSCAD-latest-armv7l.AppImage 
#	chmod a+x OpenSCAD-latest-armv7l.AppImage
	
#RUN cd /root && \
#	git clone https://github.com/openscad/openscad.git && \
#	cd openscad && ./scripts/uni-get-dependencies.sh && \
#	qmake openscad.pro && make && make install 

# Install Waveforms SDK for Digilent
#RUN mkdir /root/digilent_software/ && cd /root/digilent_software && \
#	apt-get install xdg-utils && \
#	wget -O digilent.adept.deb "https://reference.digilentinc.com/lib/exe/fetch.php?tok=275b28&media=http%3A%2F%2Ffiles.digilent.com%2FSoftware%2FAdept2%2BRuntime%2F2.16.6%2Fdigilent.adept.runtime_2.16.6-armhf.deb" && \
#	wget -O digilent.utilities.adept.deb "https://reference.digilentinc.com/lib/exe/fetch.php?tok=efa267&media=http%3A%2F%2Ffiles.digilent.com%2FSoftware%2FAdept2%2Fdigilent.adept.utilities_2.2.1-armhf.deb" && \
#	wget -O digilent.waveforms_3.7.5_armhf.deb "https://reference.digilentinc.com/lib/exe/fetch.php?tok=08c5c9&media=https%3A%2F%2Ffiles.digilent.com%2FSoftware%2FWaveforms2015%2F3.7.5%2Fdigilent.waveforms_3.7.5_armhf.deb" && \
#	wget -O digilent.sdk.tar.gz "http://files.digilent.com/Software/Adept2+SDK/2.4.2/digilent.adept.sdk_2.4.2.tar.gz" 
#	dpkg -i digilent.utilities.adept.deb && \
#	dpkg -i digilent.adept.deb && \
#	dpkg -i digilent.waveforms_3.7.5_armhf.deb



#Get Euplotid and define variables
ENV EUPLO_IMAGE=minitid
ENV JUPYTER_PORT=8888
ENV EUPLO_ARDUINO=false
ENV EUPLO_RPICAM=false

#set correct timezone (EST)
RUN cp /usr/share/zoneinfo/America/New_York /etc/localtime

RUN cd /root && git clone -b master --single-branch https://github.com/dborgesr/Euplotid.git

WORKDIR /root/Euplotid


EXPOSE 80
EXPOSE $JUPYTER_PORT
CMD ["bash", "./start.sh"]