<<<<<<< HEAD
#Minitid image for microscope and viewing
FROM resin/rpi-raspbian:jessie
=======
#Euplotid ARM image

#ARM
FROM resin/aarch64-alpine:latest
#FROM resin/aarch64-debian:stretch

#ARM on x86
#FROM resin/armv7hf-debian-qemu
#FROM amtypaldos/armv7hf-alpine-qemu
#RUN [ "cross-build-start" ]
>>>>>>> 57b841b819a707d5213102f4c59f219b50c5cb2d

USER root

WORKDIR /root

<<<<<<< HEAD
ENV APT_PACKAGES=" \
		psmisc \
		dialog \
#		nginx \
		php5-fpm \
		php5-cli \
		php5-common \
		php-apc \
=======
ENV APK_PACKAGES=" \
	tk-dev \
	libpng-dev \
	gfortran \
	wget \
	git \
	vim \
	libxml2-dev \
	ca-certificates \
	build-base \
	bzip2-dev \
	libc6-compat \
	gdbm-dev \
#	hdf5-dev \
	jpeg-dev \
	lapack-dev \
	ncurses-dev \
	sqlite-dev \
	openssl-dev \
	zlib-dev \
	xz-dev \
	linux-headers \
	curl \
	readline-dev \
	patch \
	bash \
	cmake \
	python3 \
	python3-dev \
	libffi-dev \
	libffi \
	libxslt-dev \
	openssl-dev \
	openssl"
	
# Install packages necessary for compiling python using Alpine package manager, few extra commands for linking libraries
RUN apk update  \ 
  # replacing default repositories with edge ones
  && echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing" > /etc/apk/repositories \
  && echo "http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories \
  && echo "http://dl-cdn.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories \ 
  && apk add --no-cache $APK_PACKAGES  \
  && python3 -m ensurepip \
  && rm -r /usr/lib/python*/ensurepip \
  && if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi \
  && pip3 install --upgrade pip setuptools \
  && rm -r /root/.cache \
  && ln -s /usr/include/locale.h /usr/include/xlocale.h \
  && apk update \
  && apk upgrade

ENV APT_PACKAGES=" \
		psmisc \
		dialog \
>>>>>>> 57b841b819a707d5213102f4c59f219b50c5cb2d
		apache2-utils \
		gpac \
		motion \
		zip \
		libav-tools \
		gstreamer1.0-tools \
		git \
<<<<<<< HEAD
		libraspberrypi-bin \
		libraspberrypi-dev \
		libraspberrypi-doc \
		libraspberrypi0 \
		vim \
		tk-dev \
    	libpng-dev \
		gfortran \
=======
		vim \
		tk-dev \
    	libpng-dev \
>>>>>>> 57b841b819a707d5213102f4c59f219b50c5cb2d
		wget \
		libncurses-dev \
		libxml2-dev \
		ca-certificates \
		build-essential \
		libbz2-dev \
		libc6-dev \
		libgdbm-dev \
		libjpeg-dev \
#	liblapack-dev \
		libncurses-dev \
		libsqlite3-dev \
		libssl-dev \
		zlib1g-dev \
		curl \
<<<<<<< HEAD
		i2c-tools \
=======
>>>>>>> 57b841b819a707d5213102f4c59f219b50c5cb2d
		liblzma-dev \
		xz-utils \
		dnsmasq \
		hostapd \
		iproute2 \
		iw \
		libdbus-1-dev \
		libexpat-dev \
		rfkill \
<<<<<<< HEAD
		nodejs \
		npm \
		cron \
		openscad "

RUN apt-get -q update && \ 
	apt-get dist-upgrade && \
	apt-get install -yq --no-install-recommends $APT_PACKAGES && \
  	rm -rf "/var/lib/apt/lists/*"
  
RUN curl -s -L https://github.com/jjhelmus/berryconda/releases/download/v2.0.0/Berryconda3-2.0.0-Linux-armv7l.sh > miniconda.sh && \
    bash miniconda.sh -b -p /opt/conda && \
    rm miniconda.sh && \
    export PATH=/opt/conda/bin:$PATH  && \
    conda config --set show_channel_urls True && \
    conda config --add channels rpi && \
#    conda config --add channels conda-forge && \
    conda update conda && \
    conda update --all --yes && \
#    conda install conda-build && \
#    conda install anaconda-client && \
    conda install -y pip \
	    setuptools && \
	conda clean -tipy && \
	if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi
ENV PATH=/opt/conda/bin:$PATH	
=======
		cmake \
		libxslt1-dev"

#RUN apt-get -q update && \ 
#	apt-get dist-upgrade && \
#	apt-get install -yq --no-install-recommends $APT_PACKAGES && \
# 	rm -rf "/var/lib/apt/lists/*"

#RUN curl -s -L https://github.com/dborgesr/Euplotid/raw/gh-pages/conda_installers/JetsonConda-0.1-Linux-aarch64.sh > miniconda.sh && \
#    bash miniconda.sh -b -p /root/conda && \
#    rm miniconda.sh && \
#    export PATH=/root/conda/bin:$PATH && \
#	conda config --set show_channel_urls True && \
#    conda config --add channels jetson-tx2 && \
#    conda update conda && \
#    conda update --all --yes && \
#    conda install -y pip \
#	    setuptools \
#		pandas \
#		numpy && \
#	conda clean -tipy && \
#	if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi
#ENV PATH=/root/conda/bin:$PATH
>>>>>>> 57b841b819a707d5213102f4c59f219b50c5cb2d

RUN pip install \
	setuptools \
	gnureadline \
	jupyter \
	plotly \
<<<<<<< HEAD
#	myvariant \
#	mygene \
#	pysam \
#    pandas \
    joblib \
#    biopython \
#    pyliftover \
#    scipy \
#    numpy \
    nbpresent \
    networkx \
    python-louvain \
    jupyter_contrib_nbextensions \
    ipywidgets \
    solidpython && \
	pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U

=======
	myvariant \
	mygene \
	pysam \
	cffi \
    pandas \
	lxml \
    joblib \
    biopython \
    pyliftover \
    scipy \
    numpy \
    nbpresent \
    networkx \
    python-louvain \
    ipywidgets \
    jupyter_contrib_nbextensions \
    pyyaml && \
	pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U

#Get pytorch machine learning
ENV CMAKE_PREFIX_PATH=$CONDA_DIR
RUN cd /root && git clone --recursive https://github.com/pytorch/pytorch.git && \
	cd pytorch && \
	git submodule update --init && \
	pip install -r requirements.txt && \
	python3 setup.py install
	
#RUN conda install -c soumith magma-cuda80 # or magma-cuda75 if CUDA 7.5

>>>>>>> 57b841b819a707d5213102f4c59f219b50c5cb2d
#Configure jupyter
RUN jupyter notebook --generate-config --allow-root && \
	sed -i "/c.NotebookApp.open_browser/c c.NotebookApp.open_browser = False" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.ip/c c.NotebookApp.ip = '*'" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.notebook_dir/c c.NotebookApp.notebook_dir = '/root/Euplotid'" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.token/c c.NotebookApp.token = 'euplotid'" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.iopub_data_rate_limit/c c.NotebookApp.iopub_data_rate_limit = 10000000" /root/.jupyter/jupyter_notebook_config.py \
        && jupyter nbextension enable --py widgetsnbextension \
        && jupyter contrib nbextension install --system \
        && jupyter nbextension install nbpresent --py --overwrite --system \
		&& jupyter nbextension enable nbpresent --py --system \
		&& jupyter serverextension enable nbpresent --py --system 

<<<<<<< HEAD
# Install packages for microscope camera
RUN mkdir -p /usr/src/app && \
	cd /usr/src/app && \
	git clone https://github.com/silvanmelchior/RPi_Cam_Web_Interface.git && \
	cd RPi_Cam_Web_Interface && \
    chmod u+x *.sh && \
    mkdir -p /run/shm/mjpeg && \
    sed -i 's/sudo //g' install.sh && \
    sed -i 's/sudo //g' start.sh && \
    sed -i 's/sudo //g' stop.sh && \
    sed -i 's/sudo //g' remove.sh && \
    sed -i 's/sudo //g' update.sh && \
    sed -i 's/sudo //g' RPi_Cam_Web_Interface_Installer.sh && \
    sed -i 's/sudo shutdown -r now//g' www/macros/error_hard.sh && \
    sed -i 's/80/8080/g' install.sh && \  
    sed -i '/raspizip/d' install.sh && \
    rm www/macros/error_hard.sh && \
    mkdir -p /opt/vc/bin && \
	cp bin/raspimjpeg /opt/vc/bin/ && \
	chmod 755 /opt/vc/bin/raspimjpeg && \
	echo /opt/vc/lib > /etc/ld.so.conf	 && \
	if [ ! -e /usr/bin/raspimjpeg ]; then ln -s /opt/vc/bin/raspimjpeg /usr/bin/raspimjpeg; fi && \
	ldconfig && \
	wget https://raw.githubusercontent.com/droogmic/rpi-cam-web-docker/master/install/config.txt && \
	sed -i "s/80/8080/g" config.txt && \
	sed -i "s/nginx/apache/g" config.txt && \
	sed -i "s/rpicamdir=\"\"/rpicamdir=\"microscope\"/g" config.txt && \
	./install.sh q 

# Install wifi connect
ENV DEVICE_TYPE=%%RESIN_MACHINE_NAME%%

# Install node
ENV NODE_VERSION 6.3.1
RUN curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-armv7l.tar.gz" && \
    tar -xzf "node-v$NODE_VERSION-linux-armv7l.tar.gz" -C /usr/local --strip-components=1 && \
    rm "node-v$NODE_VERSION-linux-armv7l.tar.gz" && \
    npm config set unsafe-perm true -g --unsafe-perm && \
    rm -rf /tmp/*

# Install resin-wifi-connect
ENV RESIN_WIFI_CONNECT_VERSION 2.0.7
RUN cd /usr/src/app && \
	curl -SL "https://github.com/resin-io/resin-wifi-connect/archive/v$RESIN_WIFI_CONNECT_VERSION.tar.gz" \
    | tar xzC /usr/src/app/ && \
    mv resin-wifi-connect-$RESIN_WIFI_CONNECT_VERSION resin-wifi-connect && \
    cd resin-wifi-connect && \
    JOBS=MAX npm install --unsafe-perm --production && \
    npm cache clean && \
    ./node_modules/.bin/bower --allow-root install && \
    ./node_modules/.bin/bower --allow-root cache clean && \
    ./node_modules/.bin/coffee -c ./src

=======
>>>>>>> 57b841b819a707d5213102f4c59f219b50c5cb2d
#Get Euplotid 
RUN cd /root && git clone -b master --single-branch https://github.com/dborgesr/Euplotid.git
WORKDIR /root/Euplotid

EXPOSE 80
CMD ["bash", "./start.sh"]