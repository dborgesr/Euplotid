#Euplotid ARM image

#ARM
FROM resin/aarch64-alpine:latest

#ARM on x86
#FROM resin/armv7hf-debian-qemu
#FROM amtypaldos/armv7hf-alpine-qemu
#RUN [ "cross-build-start" ]

USER root

WORKDIR /root

ENV APK_PACKAGES=" \
	tk-dev \
	libpng-dev \
	gfortran \
	wget \
	git \
	vim \
	libxml2-dev \
	ca-certificates \
	build-base \
	bzip2-dev \
	libc6-compat \
	gdbm-dev \
#	hdf5-dev \
	jpeg-dev \
	lapack-dev \
	ncurses-dev \
	sqlite-dev \
	openssl-dev \
	zlib-dev \
	xz-dev \
	linux-headers \
	curl \
	readline-dev \
	patch \
	bash \
	cmake \
	i2c-tools \
	python3 \
	python3-dev
	py-pip"

# Install packages necessary for compiling python using Alpine package manager, few extra commands for linking libraries
RUN apk update  \ 
  # replacing default repositories with edge ones
#  && echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing" > /etc/apk/repositories \
#  && echo "http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories \
#  && echo "http://dl-cdn.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories \ 
  && apk add --no-cache $APK_PACKAGES  \
  && python3 -m ensurepip \
  && rm -r /usr/lib/python*/ensurepip \
  && if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi \
  && pip install --upgrade pip setuptools \
  && rm -r /root/.cache \
  && ln -s /usr/include/locale.h /usr/include/xlocale.h


RUN pip install \
	setuptools \
	gnureadline \
	jupyter \
	plotly \
	sense-hat \
	myvariant \
	mygene \
	pysam \
    pandas \
    joblib \
    biopython \
    pyliftover \
    scipy \
    numpy \
    nbpresent \
    networkx \
    python-louvain && \
	pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U

#Get pytorch machine learning
ENV CMAKE_PREFIX_PATH=$CONDA_DIR
RUN cd /root && git clone https://github.com/pytorch/pytorch.git && \
	cd pytorch && \
	pip install -r requirements.txt && \
	python3 setup.py install
	
#RUN conda install -c soumith magma-cuda80 # or magma-cuda75 if CUDA 7.5

#Configure jupyter
RUN jupyter notebook --generate-config --allow-root && \
	sed -i "/c.NotebookApp.open_browser/c c.NotebookApp.open_browser = False" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.ip/c c.NotebookApp.ip = '*'" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.notebook_dir/c c.NotebookApp.notebook_dir = '/root/Euplotid'" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.token/c c.NotebookApp.token = 'euplotid'" /root/.jupyter/jupyter_notebook_config.py \
        && sed -i "/c.NotebookApp.iopub_data_rate_limit/c c.NotebookApp.iopub_data_rate_limit = 10000000" /root/.jupyter/jupyter_notebook_config.py

# Install wifi connect
ENV DEVICE_TYPE=%%RESIN_MACHINE_NAME%%

# Install node
ENV NODE_VERSION 6.9.1
RUN curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-armv6l.tar.gz" && \
    echo "0b30184fe98bd22b859db7f4cbaa56ecc04f7f526313c8da42315d89fabe23b2  node-v$NODE_VERSION-linux-armv6l.tar.gz" | sha256sum -c - && \
    tar -xzf "node-v$NODE_VERSION-linux-armv6l.tar.gz" -C /usr/local --strip-components=1 && \
    rm "node-v$NODE_VERSION-linux-armv6l.tar.gz" && \
    npm config set unsafe-perm true -g --unsafe-perm && \
    rm -rf /tmp/*

# Install resin-wifi-connect
ENV RESIN_WIFI_CONNECT_VERSION 2.0.7
RUN cd /usr/src/app && \
	curl -SL "https://github.com/resin-io/resin-wifi-connect/archive/v$RESIN_WIFI_CONNECT_VERSION.tar.gz" \
    | tar xzC /usr/src/app/ && \
    mv resin-wifi-connect-$RESIN_WIFI_CONNECT_VERSION resin-wifi-connect && \
    cd resin-wifi-connect && \
    JOBS=MAX npm install --unsafe-perm --production && \
    npm cache clean && \
    ./node_modules/.bin/bower --allow-root install && \
    ./node_modules/.bin/bower --allow-root cache clean && \
    ./node_modules/.bin/coffee -c ./src

#Get Euplotid 
RUN cd /root && git clone -b master --single-branch https://github.com/dborgesr/Euplotid.git
WORKDIR /root/Euplotid

EXPOSE 80
CMD ["bash", "./start.sh"]